{
  "name": "ender-package-util",
  "description": "Package utilities for the Ender CLI",
  "version": "0.0.1",
  "authors": [
    "Rod Vagg @rvagg <rod@vagg.org> (https://github.com/rvagg)",
    "Dustin Diaz @ded <dustin@obvious.com> (https://github.com/ded)",
    "Jacob Thornton @fat <jacob@twitter.com> (https://github.com/fat)"
  ],
  "keywords": [],
  "main": "./lib/index.js",
  "homepage": "https://ender.jit.su",
  "dependencies": {
    "mkdirp": "~0.3.4",
    "errno": "~0.0.3"
  },
  "devDependencies": {
    "bustermove": "*",
    "tap": "*",
    "referee": "*",
    "xregexp": "~2.0.0"
  },
  "scripts": {
    "test": "tap test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ender-js/ender-package-util.git"
  },
  "readme": "# Ender Package Util [![Build Status](https://secure.travis-ci.org/ender-js/ender-package-util.png)](http://travis-ci.org/ender-js/ender-package-util)\n\nA component of the [Ender CLI](https://github.com/ender-js/Ender/), providing utilities for working with npm packages, including Ender-specific package.json files.\n\nThis package is used by the [ender-repository](https://github.com/ender-js/ender-repository) to provide an interface to npm for the Ender CLI.\n\n## About Ender\n\nFor more information check out [http://ender.jit.su](http://ender.jit.su)\n\n## API\n\n### cleanName(name | names)\n`cleanName()` will provide a plain package name given a package name with version and/or tag. So `'bean@0.4.5'` becomes `'bean'`. Can also operate on an array of names and will return an array of cleaned names.\n\n-------------------------\n\n### isPath(package)\n`isPath()` returns a boolean when given a package name or path to a package to indicate whether this package is a path or a package in the repository.\n\n```js\nisPath('bean')         // → false\nisPath('bean@0.5.0')   // → false\nisPath('/path/to/pkg') // → true\nisPath('../foo')       // → true\n```\n\n-------------------------\n\n### getPackageRoot(parents, package)\n`getPackageRoot()` will return an absolute path to the *installed* 'package' given an array of its parent packages. This is mainly a utility to navigate through npm's *node_modules* directory structure.\n\n```js\ngetPackageRoot([], 'bean')\n// → /absolute/path/to/node_modules/bean/\ngetPackageRoot([ 'foo', 'bar' ], 'baz')\n// → /absolute/path/to/node_modules/foo/node_modules/bar/node_modules/baz/\n```\n\n-------------------------\n\n### readPackageJSON(parents, package, callback)\n`readPackageJSON()` uses `getPackageRoot()` to locate the *package.json* file for the given package and then return it **modfied for use by Ender**.\n\nGiven a standard *package.json* file, the following keys will be replaced if they exist in either the *\"ender\"* subkey, or the *\"overlay\"->\"ender\" sub-subkey:\n\n  * \"name\"\n  * \"main\"\n  * \"bridge\"\n  * \"dependencies\"\n  * \"devDependencies\"\n\nThis allows package owners to provide packages that differ when used in Node and in Ender.\n\nFor example, given a *package.json*:\n\n```json\n{\n  \"name\": \"foo\",\n  \"main\": \"foo.js\",\n  \"ender\": {\n    \"main\": \"bar.js\",\n    \"bridge\": \"ender.js\"\n  }\n}\n```\n\nYou will actually end up with a structure that looks like this, once processed:\n\n```json\n{\n  \"name\": \"foo\",\n  \"main\": \"bar.js\",\n  \"bridge\": \"ender.js\"\n}\n```\n\nThe original, unmolested, deserialized *package.json* structure is available on the prototype of the returned object, e.g.:\n\n```js\nreadPackageJSON([], 'bean', function (err, packageJSON) {\n  var original = Object.getPrototypeOf(packageJSON)\n})\n```\n\n-------------------------\n\n### getDependenciesFromJSON(packageDescriptor)\n`getDependenciesFromJSON()` gets a simple array of dependency package names (not cleaned), from the package descriptor (*package.json*). It will always return an array, even if it's empty.\n\n-------------------------\n\n### getDependenciesFromDirectory(parents, package, callback)\n`getDependenciesFromDirectory()` given a package and its parents (in an array, as in `getPackageRoot()`), find a list of dependencies in the *node_modules* directory.\n\n-------------------------\n\n### preparePackagesDirectory(callback)\n`preparePackagesDirectory()` is a simple utility to set up *node_modules* if it doesn't already exist. It is necessary for the Ender CLI to make this directory under the current working directory, otherwise npm will search for a *node_modules* directory in the parent directories and use that instead.\n\n-------------------------\n\n## Contributing\n\nContributions are more than welcome! Just fork and submit a GitHub pull request! If you have changes that need to be synchronized across the various Ender CLI repositories then please make that clear in your pull requests.\n\n### Tests\n\nEnder Package Util uses [Buster](http://busterjs.org) for unit testing. You'll get it (and a bazillion unnecessary dependencies) when you `npm install` in your cloned local repository. Simply run `npm test` to run the test suite.\n\n## Licence\n\n*Ender Package Util* is Copyright (c) 2012 [@rvagg](https://github.com/rvagg), [@ded](https://github.com/ded), [@fat](https://github.com/fat) and other contributors. It is licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ender-js/ender-package-util/issues"
  },
  "_id": "ender-package-util@0.0.1",
  "_from": "ender-package-util@~0.0.1"
}
