{
  "name": "ender-dependency-graph",
  "description": "Dependency graph construction and processing for the Ender CLI",
  "version": "0.0.2",
  "authors": [
    "Rod Vagg @rvagg <rod@vagg.org> (https://github.com/rvagg)",
    "Dustin Diaz @ded <dustin@obvious.com> (https://github.com/ded)",
    "Jacob Thornton @fat <jacob@twitter.com> (https://github.com/fat)"
  ],
  "keywords": [],
  "main": "./lib/index.js",
  "homepage": "https://ender.jit.su",
  "dependencies": {
    "ender-package-util": "~0.0.1",
    "async": "~0.1.22",
    "archy": "~0.0.2",
    "colors": "~0.6.0"
  },
  "devDependencies": {
    "bustermove": "*",
    "tap": "*",
    "referee": "*"
  },
  "scripts": {
    "test": "tap test/*-test.js"
  },
  "bin": {
    "ender-dependency-graph": "./bin/ender-dependency-graph.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ender-js/ender-dependency-graph.git"
  },
  "readme": "# Ender Dependency Graph [![Build Status](https://secure.travis-ci.org/ender-js/ender-dependency-graph.png)](http://travis-ci.org/ender-js/ender-dependency-graph)\n\nA component of the [Ender CLI](https://github.com/ender-js/Ender/), used to build a dependency graph of installed packages given a list of parent packages.\n\nSimilar to the `npm ls` command, this package understands Ender-specific packages by using [ender-package-util](https://github.com/ender-js/ender-package-util/) to interpret the *package.json* files (which may contain Ender-specific overrides for some root keys).\n\nThe `DependencyGraph` object returned by this package can be used to iterate over packages in the dependency graph. This is used for package-bundling in the Ender CLI.\n\nThe *ender-js* package (or alternative client-lib, supplied with the `'client-lib'` option), where it exists in the list of packages, will be automatically shifted to the top of the dependency graph so it is always processed first.\n\n## About Ender\n\nFor more information check out [http://ender.jit.su](http://ender.jit.su)\n\n## API\n\n### enderDependencyGraph(options, packages, callback)\n`enderDependencyGraph()` called as a function, will construct a `DependencyGraph` object for the given list of packages, working in the current working directory, and return it to via the `callback` function.\n\nThe `options` object may contain an optional `'client-lib'` key that will override the default `'ender-js'`. The client-lib will be automatically shifted to the begining of the graph so that it will always be processed first.\n\nEach node in the graph takes the form:\n\n```js\n{\n    \"packageJSON\": {} // the package.json data, interpreted by ender-package-util\n  , \"parents\": [] // an array of parent names/paths, useful for locating the package on disk\n  , \"dependencies\": {} // any child-nodes of this node\n}\n```\n\nAny dependencies in the tree, including root packages, that are not found on disk, will be identified by replacing the node object with the sring: `'missing'`.\n\n-------------------------\n\n### enderDependencyGraph.create(options, graphData)\n`create()` is mainly for internal use but it's also useful for testing with dummy data. It will return a `DependencyGraph` structure given the `graphData` generated by scanning the filesystem and the *package.json* files. The `graphData` may also be constructed manually for unit testing purposes.\n\n-------------------------\n\n### enderDependencyGraph.getClientPackageName(options)\n`getClientPackageName()` is a simple utility to work out the client-lib from the given options. By default it is `'ender-js'` but the `'client-lib'` property in the `options` object may override this value.\n\n-------------------------\n\n### enderDependencyGraph.archyTree(packages, dependencyGraph, preparePretty)\n`archyTree()` will take a list of packages and a `DependencyGraph` object and return an archy-compatible tree out of the data. Each node takes the following structure:\n\n```js\n{\n    \"label\": \"\" // the name of the package\n  , \"version\": x.y.z // the semver for the packake\n  , \"description\": \"\" // the package description from package.json\n  , \"nodes\": [] // child nodes of this package\n}\n```\n\narchy only cares about the `'label'` and `'nodes'` properties, the rest are there to allow for non-archy output methods.\n\nBy providing `true` for the third argument to `archyTree()`, `preparePretty`, you will receive back a string, already passed through archy, complete with versions, descriptions and colouring, ready for printing to stdout.\n\n-------------------------\n\n## Executable\n\nIf you install with `npm install ender-dependency-graph -g` (why would you?) then you'll get an `ender-dependency-graph` executable that you can run with a list of packages. It will scan your node_modules directory, understand the Ender-specific dependency structure and pretty-print a tree for you.\n\n## Contributing\n\nContributions are more than welcome! Just fork and submit a GitHub pull request! If you have changes that need to be synchronized across the various Ender CLI repositories then please make that clear in your pull requests.\n\n### Tests\n\nEnder Dependency Graph uses [Buster](http://busterjs.org) for unit testing. You'll get it (and a bazillion unnecessary dependencies) when you `npm install` in your cloned local repository. Simply run `npm test` to run the test suite.\n\n## Licence\n\n*Ender Dependency Graph* is Copyright (c) 2012 [@rvagg](https://github.com/rvagg), [@ded](https://github.com/ded), [@fat](https://github.com/fat) and other contributors. It is licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ender-js/ender-dependency-graph/issues"
  },
  "_id": "ender-dependency-graph@0.0.2",
  "_from": "ender-dependency-graph@~0.0.2"
}
