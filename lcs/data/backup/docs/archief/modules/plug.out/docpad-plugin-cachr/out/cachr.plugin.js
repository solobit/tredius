// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var CachrPlugin, TaskGroup, balUtil, eachr, fsUtil, pathUtil, request, safefs, _ref;

  balUtil = require('bal-util');
  safefs = require('safefs');
  eachr = require('eachr');
  TaskGroup = require('taskgroup').TaskGroup;
  request = require('request');
  pathUtil = require('path');
  fsUtil = require('fs');
  return CachrPlugin = (function(_super) {
    __extends(CachrPlugin, _super);

    function CachrPlugin() {
      _ref = CachrPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CachrPlugin.prototype.name = 'cachr';

    CachrPlugin.prototype.config = {
      refreshCache: false,
      urlPrefix: '/_docpad/plugins/cachr',
      pathPrefix: pathUtil.join('_docpad', 'plugins', 'cachr')
    };

    CachrPlugin.prototype.urlsToCache = null;

    CachrPlugin.prototype.urlsToCacheLength = 0;

    CachrPlugin.prototype.queueRemoteUrlSync = function(sourceUrl) {
      var config, details, docpad, name;

      docpad = this.docpad;
      config = this.config;
      name = require('crypto').createHash('md5').update(sourceUrl).digest('hex') + pathUtil.extname(sourceUrl).replace(/[\?\#].*$/, '');
      details = {
        name: name,
        sourceUrl: sourceUrl,
        cacheUrl: "" + config.urlPrefix + "/" + name,
        cachePath: pathUtil.resolve(docpad.config.outPath, config.pathPrefix, name)
      };
      this.urlsToCache[sourceUrl] = details;
      this.urlsToCacheLength++;
      return details.cacheUrl;
    };

    CachrPlugin.prototype.cacheRemoteUrl = function(details, next) {
      var attempt, docpad, viaRequest;

      docpad = this.docpad;
      attempt = 1;
      viaRequest = function() {
        docpad.log('debug', "Cachr is fetching [" + details.sourceUrl + "] to [" + details.cachePath + "]");
        return request({
          uri: details.sourceUrl,
          encoding: null
        }, function(err, response, body) {
          if (err) {
            ++attempt;
            if (attempt === 3) {
              docpad.log('debug', "Cachr is gave up fetching [" + details.sourceUrl + "] to [" + details.cachePath + "]");
              return safefs.exists(details.cachePath, function(exists) {
                if (exists) {
                  return safefs.unlink(details.cachePath, function(err2) {
                    return next(err);
                  });
                } else {
                  return next(err);
                }
              });
            } else {
              return viaRequest();
            }
          } else {
            docpad.log('debug', "Cachr fetched [" + details.sourceUrl + "] to [" + details.cachePath + "]");
            return safefs.writeFile(details.cachePath, body, function(err) {
              return next(err);
            });
          }
        });
      };
      if (this.config.refreshCache) {
        viaRequest();
      } else {
        balUtil.isPathOlderThan(details.cachePath, 1000 * 60 * 5, function(err, older) {
          if (err) {
            return next(err);
          }
          if (older === null || older === true) {
            return viaRequest();
          } else {
            return next();
          }
        });
      }
      return this;
    };

    CachrPlugin.prototype.renderBefore = function(_arg, next) {
      var cachr, templateData;

      templateData = _arg.templateData;
      cachr = this;
      this.urlsToCache = {};
      this.urlsToCacheLength = 0;
      templateData.cachr = function(sourceUrl) {
        return cachr.queueRemoteUrlSync(sourceUrl);
      };
      next();
      return this;
    };

    CachrPlugin.prototype.writeAfter = function(_arg, next) {
      var cachr, cachrPath, config, docpad, failures, templateData, urlsToCache, urlsToCacheLength;

      templateData = _arg.templateData;
      cachr = this;
      docpad = this.docpad;
      config = this.config;
      urlsToCache = this.urlsToCache;
      urlsToCacheLength = this.urlsToCacheLength;
      cachrPath = pathUtil.resolve(docpad.config.outPath, config.pathPrefix);
      failures = 0;
      if (!urlsToCacheLength) {
        return next();
      }
      docpad.log('debug', "Cachr is caching " + urlsToCacheLength + " files...");
      safefs.ensurePath(cachrPath, function(err) {
        var tasks,
          _this = this;

        if (err) {
          return next(err);
        }
        tasks = new TaskGroup().setConfig({
          concurrency: 0
        }).once('complete', function(err) {
          docpad.log((failures ? 'warn' : 'debug'), 'Cachr finished caching', (failures ? "with " + failures + " failures" : ''));
          return next();
        });
        eachr(urlsToCache, function(details, sourceUrl) {
          return tasks.addTask(function(complete) {
            return cachr.cacheRemoteUrl(details, function(err) {
              if (err) {
                docpad.log('warn', "Cachr failed to fetch: " + sourceUrl);
                docpad.error(err);
                ++failures;
              }
              return complete();
            });
          });
        });
        tasks.run();
        return this;
      });
      return this;
    };

    return CachrPlugin;

  })(BasePlugin);
};
